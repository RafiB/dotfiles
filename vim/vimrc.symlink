set nocompatible                              " Make vim more useful

filetype plugin indent on

set modeline
set smartindent
set autoindent                                " Automatic program identing
set cinkeys-=0#                               " Comments don't fiddle with indenting
set backspace=indent,eol,start
set tabstop=4                                 " Tab key results in 4 spaces
set shiftwidth=4                              " Num columns for auto-indenting
set softtabstop=4                             " Tab key results in 4 spaces
set expandtab                                 " Expand tabs to spaces
set smarttab                                  " Be smart when using tabs
if $TMUX == ''
  set clipboard+=unnamed
  set clipboard+=unnamedplus
endif
set go+=a
set number                                    " Enable line numbers
set laststatus=2                              " Always show statusline
set hlsearch                                  " Highlight all search hits
set incsearch                                 " Refine search as you type
set list                                      " Show whitespace as special chars - see listchars
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· " Unicode characters for various things
"set spell                                     " Enable spell checking
set textwidth=100                             " 100 is the new 80
set colorcolumn=101                           " Highlight column 101 for line length indicator
set magic                                     " Regular expressions
set autoread                                  " Reread file when changed from the outside
set showmatch                                 " Show matching brackets when cursor is over them
set suffixes+=.pyc                            " Ignore these files when tab-completing
set notitle                                   " Don't set the title of the vim window
set wildignore=*.class,*.o,*~,*.pyc,.git,node_modules  " Ignore certain files in tab-completion
set nowrap
set redrawtime=10000                          " Don't give up on syntax highlighting too quickly

" Turn backup off, everything's in git
set nobackup
set nowritebackup
set noswapfile

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

command! Q q
command! W w

" Use Pathogen for plugin management. See update.sh in this directory.
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

set rtp+=/usr/bin/fzf
set rtp+=~/.fzf
let $FZF_DEFAULT_COMMAND = 'ag --path-to-ignore .gitignore -g ""'

nmap ; :Buffers<CR>
nmap <C-P> :Files<CR>
nmap <S-T> :Tags<CR>

colorscheme seoul256
set bg=light

" Keep ctrl+arrow working in tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

" Use The Silver Searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" Tell ack.vim to use ag (the Silver Searcher) instead
let g:ackprg = 'ag --vimgrep'

" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" SuperTab
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=1

" Now, make python work with virtualenvs:
if has("python") && !empty($VIRTUAL_ENV)
  python << EOF
import os
import sys
a = os.environ['VIRTUAL_ENV'] + '/bin/activate_this.py'
execfile(a, dict(__file__ = a))
if 'PYTHONPATH' not in os.environ:
    os.environ['PYTHONPATH'] = ''
    os.environ['PYTHONPATH'] += os.getcwd()+":"
    os.environ['PYTHONPATH'] += ":".join(sys.path)
EOF
endif

syntax on

" let g:airline_powerline_fonts = 1
" let g:airline_theme = 'light'


" Map f8 for Tagbar
nmap <F8> :TagbarToggle<CR>
nmap \e :NERDTreeToggle<CR>

" Remap ctrl+arrows to move between window splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>

" Remap space for use with easymotion
map <Space> \\w

" Map enter to clear highlighted search hits
nnoremap <CR> :nohlsearch<CR><CR>
noremap Q <Nop>

augroup python
    autocmd!
    autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4 completeopt-=preview
augroup end

augroup vimrc
  autocmd!
  autocmd BufWinEnter,Syntax * syn sync minlines=500 maxlines=500
augroup END

" ALE
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_python_pylint_options = '
    \ --ignored-modules=time,datetime
    \ --disable=E1101
              \,C0103
              \,C0111
              \,C0301
              \,C0302
              \,C0330
              \,C0411
              \,W0201
              \,W0611
              \,W0703
              \,R0901
              \,R0902
              \,R0903
              \,R0904
              \,R0911
              \,R0912
              \,R0913
              \,R0914
              \,R0915'
let g:ale_python_flake8_options = '--ignore=F401'  " imported but unused
let g:ale_linters = {
\   'python': ['flake8', 'pylint'],
\   'java': {'classPath': ['/usr/share/java/junit4.jar']}
\}
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
let g:ale_sign_column_always = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 1
let g:ale_open_list = 1

highlight link ALEWarningSign String
highlight link ALEErrorSign Title
highlight ColorColumn ctermbg=235

let g:polyglot_disabled = ['python-indent']

" let g:pymode_indent = 0

" Lightline
let g:lightline = {
\ 'active': {
\   'left': [['mode', 'paste'], ['filename', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ 'component_function': {
\   'filename': 'MyFilename',
\ },
\}

function! MyFilename()
  let n = tabpagenr()
  let buflist = tabpagebuflist(n)
  let winnr = tabpagewinnr(n)
  let bufnum = buflist[winnr - 1]
  let bufname = expand('#'.bufnum.':t')
  let buffullname = fnamemodify(expand('#'.bufnum.':p'), ":~:.")
  return buffullname
  let buffullnames = []
  let bufnames = []
  for i in range(1, tabpagenr('$'))
    if i != n
      let num = tabpagebuflist(i)[tabpagewinnr(i) - 1]
      call add(buffullnames, expand('#' . num . ':p'))
      call add(bufnames, expand('#' . num . ':t'))
    endif
  endfor
  let i = index(bufnames, bufname)
  if strlen(bufname) && i >= 0 && buffullnames[i] != buffullname
    return buffullname
  else
    return strlen(bufname) ? bufname : '[No Name]'
  endif
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction
function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction
function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

set statusline+=%{gutentags#statusline()}

" Update and show lightline but only if it's visible (e.g., not in Goyo)
autocmd User ALELint call s:MaybeUpdateLightline()
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" QuickFix close function; :q should close a window *and* the accompanying
" quickfix
aug QFClose
  au!
  " if |q| doesn't work use |cclose| ?
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 1
let g:gutentags_project_root = ['tags']
let g:gutentags_ctags_extra_args = [
            \ '--file-scope=no',
            \ ]

let g:python_max_line_length = 100

" let g:jedi#show_call_signatures=1
" let g:jedi#show_call_signatures_delay = 500
" nnoremap <silent> <C-]> :call jedi#goto()<CR>

" Mypy stuff
set makeprg=mypy-daemon
command! -nargs=* Mypy silent make! --plugin=vim <q-args> | redraw! | cw
