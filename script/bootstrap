#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else
        if [ -d "$src" ]
        then
          user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all, [m]erge with backup (overwriting collisions)?"
        else
          user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        fi
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          m )
            if [ -d "$src" ]
            then
              backup=true
              merge=true
            fi;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      if [ -e "${dst}.backup" ]
      then
        backupcounter=1
        while [ -e "${dst}.backup.$backupcounter" ]
        do
          backupcounter=$((backupcounter+1))
        done
        mv "$dst" "${dst}.backup.$backupcounter"
        backupdir="${dst}.backup.$backupcounter"
      else
        mv "$dst" "${dst}.backup"
        backupdir="${dst}.backup"
      fi
      success "moved $dst to $backupdir"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi

  # Keep existing files/folders unless they clash with dotfiles
  # in which case we overwrite existing with the stuff in repo
  if [ "$merge" == "true" ]
  then
    for oldf in `ls -A $backupdir`
    do
      # If the thing in the backup doesn't exist in the repo
      # then copy it into the repo.
      if [ ! -e "$dst/$oldf" ]
      then
        if [ -d "$backupdir/$oldf" ]
        then
          cp -r "$backupdir/$oldf" "$dst/$oldf"
        else
          cp "$backupdir/$oldf" "$dst/$oldf"
        fi

        success "merged old $oldf into dotfiles"
      # otherwise, ignore the old one and keep the new one
      else
        success "collision on ${oldf}: keeping the one in the repo"
      fi
    done
    merge=false
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_gitconfig () {
  info 'setup gitconfig\n'

  git_credential='cache'

  user ' - What is your github author name?'
  read -e git_authorname
  user ' - What is your github author email?'
  read -e git_authoremail

  mv git/gitconfig.symlink git/gitconfig.symlink.scaffold
  sed -e "s/name = .*/name = $git_authorname/g" -e "s/email = .*/email = $git_authoremail/g" -e "s/helper = .*/helper = $git_credential/g" git/gitconfig.symlink.scaffold > git/gitconfig.symlink
  rm git/gitconfig.symlink.scaffold

  success 'gitconfig setup success'
}

setup_vim () {
  info 'setup vim\n'
  mkdir -p "$HOME/.vim/tmp"
  mkdir -p "$HOME/.vim/bundle"
  if [ ! -d "$HOME/.vim/bundle/vundle" ]; then
    git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  fi
  vim +BundleInstall +qall
  success 'vim setup success'
}

setup_gitconfig
install_dotfiles
setup_vim
git clone git://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

echo ''
echo '  All installed!'
